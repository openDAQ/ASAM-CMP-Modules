stages:
  - build
  - check
  - test

variables:
  PLATFORM: msvc
  CONFIGURATION: Debug
  BUILD_PATH: ci/build
  TEST_PATH: ci/test
  GIT_SUBMODULE_STRATEGY: recursive

####################################
#
#         Platforms
#
####################################

.vs2017_msvc_win32:
  variables:
    PLATFORM: msvc
    CMAKE_GENERATOR: "Visual Studio 15 2017"
    CMAKE_GENERATOR_ID: "VS2017"
    ARCHITECTURE: Win32

.vs2017_msvc_win64:
  variables:
    PLATFORM: msvc
    CMAKE_GENERATOR: "Visual Studio 15 2017"
    CMAKE_GENERATOR_ID: "VS2017"
    ARCHITECTURE: x64

####################################
#
#         Configurations
#
####################################

.vs2017_msvc_win32_debug:
  variables:
    DSRT_CONFIG: Debug
  extends:
    - .vs2017_msvc_win32

.vs2017_msvc_win32_release:
  variables:
    DSRT_CONFIG: Release
  extends:
    - .vs2017_msvc_win32

.vs2017_msvc_win64_debug:
  variables:
    DSRT_CONFIG: Debug
  extends:
    - .vs2017_msvc_win64

.vs2017_msvc_win64_release:
  variables:
    DSRT_CONFIG: Release
  extends:
    - .vs2017_msvc_win64


.configure_cmake:
  - echo "build_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}"
  - mkdir "$CI_PROJECT_DIR/$env:BUILD_PATH"
  - cd "$CI_PROJECT_DIR/$env:BUILD_PATH"
  # PowerShell does not propagate arguments correctly so use 'Start-Process'
  - |
    $cmake = Start-Process cmake -ArgumentList "-G ""$env:CMAKE_GENERATOR"" -A $env:ARCHITECTURE ../.." -NoNewWindow -Wait -PassThru
    if ($cmake.ExitCode -ne 0) { exit 1 }
    
.compile-asam_cmp_capture_module:
  tags:
    - rtcore-bb
  stage: build
  script:
    - !reference [.configure_cmake]
    - $OutLog = "build_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}.log"
    # Use cmake build command so we're generator independent
    - cmake --build . --config $env:DSRT_CONFIG | tee $CI_PROJECT_DIR/$OutLog
    # Remove unnecessary build artifacts
    - Remove-Item * -Include *.ilk,*.pdb,*.obj,*.lib -Recurse
  artifacts:
    expire_in: 1 days
    name: "rtcore_${env:JOB_NAME}_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}_${env:CI_COMMIT_SHORT_SHA}"
    paths:
      - "$env:BUILD_PATH"
      - "build_*.log"

win32_debug_compile:
  extends:
    - .vs2017_msvc_win32_debug
    - .compile-asam_cmp_capture_module

win32_release_compile:
  extends:
    - .vs2017_msvc_win32_release
    - .compile-asam_cmp_capture_module

win64_debug_compile:
  extends:
    - .vs2017_msvc_win64_debug
    - .compile-asam_cmp_capture_module

win64_release_compile:
  extends:
    - .vs2017_msvc_win64_release
    - .compile-asam_cmp_capture_module


#####################################
##
##         Check warnings
##
#####################################

.warnings:
  tags:
    - rtcore-bb
  stage: check
  variables:
    SEARCH_STRING: ' warning C\d{4}:'
  script:
    - echo "build_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}"
    - >
      $warnings = cat "build_*.log"
      | Select-String -Pattern $env:SEARCH_STRING
      | Select-Object -ExpandProperty Line
      | Sort-Object
      | Get-Unique
    # Bug in 'expose_as' doesn't work with environment variables, wait until fix then change back
    #- $warnings | tee "warnings_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}.log"

    # display hints or warnings
    - $warnings | tee compile_warnings.txt;
    - if ($warnings) { exit 1 }
  allow_failure: true
  artifacts:
    name: "rtcore_warnings_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}_${env:CI_COMMIT_SHORT_SHA}"
    when: on_failure
    expire_in: 1 week
    expose_as: "Compile warnings"
    paths:
      #- "warnings_${env:PLATFORM}_${env:ARCHITECTURE}_${env:DSRT_CONFIG}_${env:CMAKE_GENERATOR_ID}.log"
      - "compile_warnings.txt"

win32_debug_warnings:
  extends:
    - .vs2017_msvc_win32_debug
    - .warnings
  needs:
    - job: win32_debug_compile
      artifacts: true

win32_release_warnings:
  extends:
    - .vs2017_msvc_win32_release
    - .warnings
  needs:
    - job: win32_release_compile
      artifacts: true

win64_debug_warnings:
  extends:
    - .vs2017_msvc_win64_debug
    - .warnings
  needs:
    - job: win64_debug_compile
      artifacts: true

win64_release_warnings:
  extends:
    - .vs2017_msvc_win64_release
    - .warnings
  needs:
    - job: win64_release_compile
      artifacts: true


####################################
#
#         Unit tests
#
####################################

.unit_test:
  tags:
    - rtcore-bb
  stage: test
  script:
    - mkdir -Force "$CI_PROJECT_DIR/$env:TEST_PATH"
    - cd "$CI_PROJECT_DIR/$env:BUILD_PATH"
    # Print the CMake generator info
    - >
      Get-Content .\CMakeCache.txt
      | Select-String -Pattern "CMAKE_GENERATOR:INTERNAL|CMAKE_EXE_LINKER_FLAGS:STRING"
      | % {$_.Line}
    # Use the env variable since we don't run gtest directly
    - $env:GTEST_OUTPUT = "xml:$CI_PROJECT_DIR/${env:TEST_PATH}/junit_reports/"
    - cd "$CI_PROJECT_DIR/$env:BUILD_PATH/bin/$env:DSRT_CONFIG/"
    - Start-Process -Wait "test_asam_cmp_capture_module.exe"
  artifacts:
    expire_in: 1 week
    reports:
      junit: "${env:TEST_PATH}/junit_reports/*.xml"

ut_win32_debug:
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
  extends:
    - .vs2017_msvc_win32_debug
    - .unit_test
  needs:
    - job: win32_debug_compile
      artifacts: true

ut_win32_release:
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
  extends:
    - .vs2017_msvc_win32_release
    - .unit_test
  needs:
    - job: win32_release_compile
      artifacts: true

ut_win64_debug:
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
  extends:
    - .vs2017_msvc_win64_debug
    - .unit_test
  needs:
    - job: win64_debug_compile
      artifacts: true

ut_win64_release:
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
  extends:
    - .vs2017_msvc_win64_release
    - .unit_test
  needs:
    - job: win64_release_compile
      artifacts: true
